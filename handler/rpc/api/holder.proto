syntax = "proto3";

package fox.holder.service;
option go_package = ".;api";

import "google/protobuf/timestamp.proto";

message Pagination {
    string next_cursor = 1;
    bool has_next = 2;
}

enum Action {
    _ = 0;
    // sys
    SysWithdraw = 1;
    ActionSysProperty = 2;
    // proposal
    ProposalMake = 3;
    ProposalShout = 4;
    ProposalVote = 5;
    // Gem
    GemDonate = 6;
    GemGain = 7;
    // Vault
    VaultLock = 8;
    VaultRelease = 9;
}

message Transaction {
    enum Status {
        Pending = 0;
        Abort = 1;
        OK = 2;
    }
    string id = 1;
    // @inject_tag: swaggertype:"string" format:"date"
    google.protobuf.Timestamp created_at = 2;
    string asset_id = 3;
    string amount = 4;
    Action action = 5;
    Status status = 6;
    string msg = 7;
    string parameters = 8;
}

message Gem {
    string id = 1;
    string name = 2;
    string logo = 3;
    string amount = 4;
    string liquidity = 5;
    string profit = 6;
}

message Redeem {
    string id = 1;
    // @inject_tag: swaggertype:"string" format:"date"
    google.protobuf.Timestamp created_at = 2;
    string vault_id = 3;
    string user_id = 4;
    string amount = 5;
    string reward = 6;
    string penalty = 7;
    string liquidity = 8;
}

message Vault {
    enum Status {
        Locking = 0;
        Released = 1;
    }
    string id = 1;
    // @inject_tag: swaggertype:"string" format:"date"
    google.protobuf.Timestamp created_at = 2;
    string user_id = 3;
    Status status = 4;
    string asset_id = 5;
    int64  duration = 6;
    int64  min_duration = 7;
    string amount = 8;
    string liquidity = 9;
    string reward = 10;
    string penalty = 11;
    Gem gem = 12;
}

message Req {
    message ListGems {}

    message FindVault{
        // @inject_tag: valid:"uuid,required"
        string id = 1;
    }

    // List All Vaults
    message ListVaults {}

    // Find Tx By FollowID
    message FindTransaction {
        // @inject_tag: valid:"uuid,required"
        string id = 1;
    }

    message ListTransactions {
        string cursor = 1;
        int64 limit = 2;
    }
}

message Resp {
    message ListGems {
        repeated Gem gems = 1;
    }

    message ListVaults {
        repeated Vault vaults = 1;
    }

    message ListTransactions {
        repeated Transaction transactions = 1;
        Pagination pagination = 2;
    }
}

service Holder {
    // tx
    rpc FindTransaction(Req.FindTransaction) returns (Transaction);
    rpc ListTransactions(Req.ListTransactions) returns (Resp.ListTransactions);
    // Gem
    rpc ListGems(Req.ListGems) returns (Resp.ListGems);
    // vaults
    rpc FindVault(Req.FindVault) returns (Vault);
    rpc ListVaults(Req.ListVaults) returns (Resp.ListVaults);
}
